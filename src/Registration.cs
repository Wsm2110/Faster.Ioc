using System;
//using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Faster.Ioc.Contracts;
using Expression = FastExpressionCompiler.LightExpression.Expression;

namespace Faster.Ioc
{
    [System.Diagnostics.DebuggerDisplay("RegisteredType:{RegisteredType.Name}")]
    public class Registration: ICloneable
    {
        #region Properties

        public ConstructorInfo Constructor { get; set; }

        /// <summary>
        /// Gets the lifetime(transient, or singelton)
        /// </summary>
        /// <value>
        /// The lifetime.
        /// </value>
        public Lifetime Lifetime { get; set; }

        /// <summary>
        /// Type used while registering a Type
        /// </summary>
        /// <value>
        /// The registeredType.
        /// </value>
        public Type RegisteredType { get; set; }

        /// <summary>
        /// Gets or sets the type of the return.
        /// </summary>
        /// <value>
        /// The type of the return.
        /// </value>
        public Type ReturnType { get; set; }

        /// <summary>
        /// Gets or sets the hashcode.
        /// </summary>
        /// <value>
        /// The hashcode.
        /// </value>
        public int HashCode { get; set; }

        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        /// <value>
        /// The value.
        /// </value>
        public Func<Scoped, object> Value { get; set; }

        /// <summary>
        /// Gets or sets the experssion which is generated by the dependencyResolver
        /// </summary>
        /// <value>
        /// The override expression.
        /// </value>
        public Expression Expression { get; set; }

        /// <summary>
        /// Gets or sets an expression used while creating an override
        /// </summary>
        /// <value>
        /// The override expression.
        /// </value>
        public System.Linq.Expressions.Expression<Func<object>> OverrideExpression { get; set; }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="Registration" /> class.
        /// </summary>
        /// <param name="registeredType">Type of the registered.</param>
        /// <param name="returnType">Type of the return.</param>
        public Registration(Type registeredType, Type returnType)
        {
            RegisteredType = registeredType;
            ReturnType = returnType;
            Lifetime = Lifetime.Transient;
            HashCode = RuntimeHelpers.GetHashCode(registeredType);
            TargetConstructorWithLargestParamCount();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Registration" /> class.
        /// </summary>
        /// <param name="registeredType">Type of the registered.</param>
        /// <param name="returnType">Type of the return.</param>
        /// <param name="lifetime">The lifetime.</param>
        public Registration(Type registeredType, Type returnType, Lifetime lifetime)
        {
            RegisteredType = registeredType;
            ReturnType = returnType;
            Lifetime = lifetime;
            HashCode = RuntimeHelpers.GetHashCode(registeredType);

            if (Lifetime == Lifetime.Scoped)
            {
                ++Scoped.ScopeCount;
            }

            TargetConstructorWithLargestParamCount();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Registration" /> class.
        /// </summary>
        /// <param name="registeredType">Type of the registered.</param>
        /// <param name="returnType">Type of the return.</param>
        /// <param name="lifetime">The lifetime.</param>
        /// <param name="hashCode">The hash code.</param>
        public Registration(Type registeredType, Type returnType, Lifetime lifetime, int hashCode)
        {
            RegisteredType = registeredType;
            ReturnType = returnType;
            Lifetime = lifetime;
            HashCode = hashCode;

            if (Lifetime == Lifetime.Scoped)
            {
                ++Scoped.ScopeCount;
            }

            TargetConstructorWithLargestParamCount();
        }

        #endregion

        [MethodImpl(256)]
        private void TargetConstructorWithLargestParamCount()
        {
            byte paramCount = 0;
            foreach (var constructor in ReturnType.GetConstructors())
            {
                var length = (byte)constructor.GetParameters().Length;
                if (length >= paramCount)
                {
                    paramCount = length;
                    Constructor = constructor;
                }
            }

            if (Constructor == null)
            {
                throw new InvalidOperationException($"No public constructors found of type {ReturnType}");
            }
        }

        public object Clone()
        {
            return new Registration(RegisteredType, ReturnType, Lifetime);
        }
    }
}